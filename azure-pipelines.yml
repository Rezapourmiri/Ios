parameters:
- name: environment
  displayName: environment name
  type: string
  default: serverstage
  values:
  - prod
  - serverstage
  - ios

trigger:
  - notrigger
  
resources:
  repositories:
  - repository: FlutterApp
    type: git
    name: FlutterApp
    ref: $(Build.SourceBranch)
  - repository: azure-secure-libraries
    type: git
    name: azure-secure-libraries
    ref: master
  
stages:
- ${{ if ne(parameters.environment, 'ios') }}:

  - stage: AndroidStage
    pool: flutter
      
    dependsOn: []
    displayName: Android
    jobs:

    - job: AndroidJob
      displayName: Android
      
      steps: 
      - checkout: FlutterApp
      - checkout: azure-secure-libraries

      - ${{ if eq(parameters.environment, 'serverstage') }}:    

        - script: |
            copy $(Build.SourcesDirectory)\azure-secure-libraries\Flutter\ServerStage_key.properties $(Build.SourcesDirectory)\FlutterApp\android\key.properties
            copy $(Build.SourcesDirectory)\azure-secure-libraries\Flutter\ServerStage_keystore.jks $(Build.SourcesDirectory)\FlutterApp\android\app\keystore.jks
          displayName: 'copy files'
          
      - ${{ if eq(parameters.environment, 'prod') }}:
        - task: PowerShell@2
          displayName: 'Change to prod mode'
          inputs:
            targetType: 'inline'
            script: |
              Set-Content -Path "$(Build.SourcesDirectory)/FlutterApp/lib/helpers/environment_helpers.dart" -Value (Get-Content $(Build.SourcesDirectory)/FlutterApp/lib/helpers/environment_helpers.dart | % {$_ -replace "String appEnvironment = EnvironmentHelpers.SERVERSTAGE","String appEnvironment = EnvironmentHelpers.PROD"})

        - script: |
            copy $(Build.SourcesDirectory)\azure-secure-libraries\Flutter\prod_key.properties $(Build.SourcesDirectory)\FlutterApp\android\key.properties
            copy $(Build.SourcesDirectory)\azure-secure-libraries\Flutter\prod_keystore.jks $(Build.SourcesDirectory)\FlutterApp\android\app\keystore.jks
            copy $(Build.SourcesDirectory)\azure-secure-libraries\Flutter\prod_AndroidManifest.xml $(Build.SourcesDirectory)\FlutterApp\android\app\src\main\AndroidManifest.xml
            copy $(Build.SourcesDirectory)\azure-secure-libraries\Flutter\prod_build.gradle $(Build.SourcesDirectory)\FlutterApp\android\app\build.gradle
          displayName: Copy config files


      - script: |
          cd $(Build.SourcesDirectory)\FlutterApp
          flutter build apk --release
        displayName: 'Flutter build apk'

      - script: |
          certutil -hashfile $(Build.SourcesDirectory)/FlutterApp/build/app/outputs/flutter-apk/app-release.apk SHA512 >> $(Build.SourcesDirectory)/FlutterApp/build/app/outputs/flutter-apk/sha512.txt
        displayName: 'Write sha512'


      - ${{ if eq(parameters.environment, 'serverstage') }}:    
        - script: |
            scp $(Build.SourcesDirectory)/FlutterApp/build/app/outputs/flutter-apk/app-release.apk root@185.79.156.213:/home/mhaghshenas.ir/hrStage.mhaghshenas.ir/apps
            scp $(Build.SourcesDirectory)/FlutterApp/build/app/outputs/flutter-apk/sha512.txt root@185.79.156.213:/home/mhaghshenas.ir/hrStage.mhaghshenas.ir/apps
          displayName: 'Upload app'

      - ${{ if eq(parameters.environment, 'prod') }}:    
        - script: |
            scp $(Build.SourcesDirectory)/FlutterApp/build/app/outputs/flutter-apk/app-release.apk root@185.79.156.213:/home/mhaghshenas.ir/hr.mhaghshenas.ir/apps
            scp $(Build.SourcesDirectory)/FlutterApp/build/app/outputs/flutter-apk/sha512.txt root@185.79.156.213:/home/mhaghshenas.ir/hr.mhaghshenas.ir/apps
          displayName: 'Upload app'


      # - task: CopyFiles@2
      #   displayName: "Copy app to staging directory"
      #   inputs:
      #     sourceFolder: '$(Agent.BuildDirectory)'
      #     contents: '**/bundle/**'
      #     targetFolder: '$(Build.StagingDirectory)'
      #     flattenFolders: true

      # - task: PublishBuildArtifacts@1
      #   displayName: "Publish AAB file"
      #   inputs:
      #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      #     ArtifactName: 'AAB'
      #     publishLocation: 'Container'
- ${{ if eq(parameters.environment, 'ios') }}:

  - stage: iOSStage
    pool: flutterios
    dependsOn: []
    displayName: iOS
    jobs:
  
    - job: iOSJob
      displayName: iOS
      steps: 
            
      - task: DownloadSecureFile@1
        name: certfileapple
        displayName: Download cert apple file
        inputs:
          secureFile: 'certapple.p12' 
          
      - script: |
          cp $(certfileapple.secureFilePath) $(Build.SourcesDirectory)/FlutterApp/ios/certapple.p12
        displayName: 'write cert'
      # replace "iosKey" and "yourPwd" with your secure file name and password
      - task: InstallAppleCertificate@2
        displayName: Install certificate
        inputs:
          certSecureFile: 'certapple.p12'
          certPwd: '123'
          keychain: 'temp'
      
      # replace "ios_Profile.mobileprovision" with your secure file name
      - task: InstallAppleProvisioningProfile@1
        displayName: Install provisioning file
        inputs:
          provisioningProfileLocation: secureFiles
          provProfileSecureFile: 'Podfile'
          
      # - task: FlutterInstall@0
      #   displayName: "Install Flutter SDK"
      #   inputs:
      #     mode: 'auto'
      #     channel: 'stable'
      #     version: 'latest'

      - task: FlutterCommand@0
        displayName: "Run Flutter diagnostics"
        inputs:
          projectDirectory: '.'
          arguments: 'doctor -v'

      # adjust path to the *.plist file
      - task: FlutterBuild@0
        displayName: "Build application"
        inputs:
          target: ipa
          projectDirectory: '$(Build.SourcesDirectory)'
          exportOptionsPlist: 'ios/exportOptions.plist'

      # - task: FlutterTest@0
      #   displayName: "Run unit tests"
      #   inputs:
      #     generateCodeCoverageReport: true
      #     projectDirectory: '$(Build.SourcesDirectory)'

      - task: CopyFiles@2
        displayName: "Copy app to staging directory"
        inputs:
          sourceFolder: '$(Agent.BuildDirectory)'
          contents: '**/ipa/*.ipa'
          targetFolder: '$(Build.StagingDirectory)'
          flattenFolders: true

      - task: PublishBuildArtifacts@1
        displayName: "Publish IPA file"
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'IPA'
          publishLocation: 'Container'
        
# - stage: winStage
#   pool: 
#     vmImage: 'windows-latest'
#   dependsOn: []
#   displayName: Windows
#   jobs:
 
#   - job: windowsJob
#     displayName: Windows
#     steps: 
        
#     - task: FlutterInstall@0
#       displayName: "Install Flutter SDK"
#       inputs:
#         mode: 'auto'
#         channel: 'stable'
#         version: 'latest'
    
#     - task: FlutterCommand@0
#       displayName: "Run Flutter diagnostics"
#       inputs:
#         projectDirectory: '.'
#         arguments: 'doctor -v'

#     - task: FlutterBuild@0
#       displayName: "Build application"
#       inputs:
#         target: windows
#         projectDirectory: '$(Build.SourcesDirectory)'

#     - task: FlutterTest@0
#       displayName: "Run unit tests"
#       inputs:
#         generateCodeCoverageReport: true
#         projectDirectory: '$(Build.SourcesDirectory)'

#     # install package msix -> https://pub.dev/packages/msix
#     # provide signing information in pubspec.yaml -> see https://github.com/YehudaKremer/msix/tree/main/example#without-signing
#     - task: FlutterCommand@0
#       displayName: "Create MSIX file"
#       inputs:
#         projectDirectory: '$(Build.SourcesDirectory)'
#         arguments: 'pub run msix:create --build-windows false'

#     - task: CopyFiles@2
#       displayName: "Copy app to staging directory"
#       inputs:
#         sourceFolder: '$(Agent.BuildDirectory)'
#         contents: '**/*.msix'
#         targetFolder: '$(Build.StagingDirectory)'
#         flattenFolders: true

#     - task: PublishBuildArtifacts@1
#       displayName: "Publish MSIX"
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         ArtifactName: 'Windows'
#         publishLocation: 'Container'