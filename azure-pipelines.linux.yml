parameters:
- name: environment
  displayName: environment name
  type: string
  default: serverstage
  values:
  - prod
  - serverstage

resources:
  repositories:
  - repository: FlutterApp
    type: git
    name: FlutterApp
    ref: $(Build.SourceBranch)
  - repository: azure-secure-libraries
    type: git
    name: azure-secure-libraries
    ref: master

steps:
- checkout: FlutterApp
- checkout: azure-secure-libraries


stages:
- stage: AndroidStage
  pool: flutter
    
  dependsOn: []
  displayName: Android
  jobs:

  - job: AndroidJob
    displayName: Android
    steps: 
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - ${{ if eq(parameters.environment, 'serverstage') }}:    
      - task: Bash@3
        displayName: Copy config files
        inputs:
          targetType: 'inline'
          script: |
            cp $(Build.SourcesDirectory)/azure-secure-libraries/Flutter/ServerStage_key.properties $(Build.SourcesDirectory)/android/key.properties
            cp $(Build.SourcesDirectory)/azure-secure-libraries/Flutter/ServerStage_keystore.jks $(Build.SourcesDirectory)/android/app/keystore.jks
      
    - ${{ if eq(parameters.environment, 'prod') }}:    
      - task: Bash@3
        displayName: Copy config files
        inputs:
          targetType: 'inline'
          script: |
            cp $(Build.SourcesDirectory)/azure-secure-libraries/Flutter/prod_key.properties $(Build.SourcesDirectory)/android/key.properties
            cp $(Build.SourcesDirectory)/azure-secure-libraries/Flutter/prod_keystore.jks $(Build.SourcesDirectory)/android/app/keystore.jks
            cp $(Build.SourcesDirectory)/azure-secure-libraries/Flutter/prod_AndroidManifest.xml $(Build.SourcesDirectory)/android/app/src/main/AndroidManifest.xml
            cp $(Build.SourcesDirectory)/azure-secure-libraries/Flutter/prod_build.gradle $(Build.SourcesDirectory)/android/app/build.gradle

    # - task: FlutterInstall@0
    #   displayName: "Install Flutter SDK"
    #   inputs:
    #     mode: 'auto'
    #     channel: 'stable'
    #     version: 'custom'
    #     customVersion: '3.3.9'

    # - task: FlutterBuild@0
    #   displayName: "Build application"
    #   inputs:
    #     target: 'apk'
    #     projectDirectory: '$(Build.SourcesDirectory)'

    - script: |
        # sha512sum $(Build.SourcesDirectory)/FlutterApp/build/app/outputs/flutter-apk/app-release.apk
      displayName: 'get sha512'

    - ${{ if eq(parameters.environment, 'serverstage') }}:    
      - task: CopyFilesOverSSH@0
        inputs:
          sshEndpoint: 'mhaghshenasServer'
          sourceFolder: '$(Build.SourcesDirectory)/FlutterApp/build/app/outputs/flutter-apk'
          Contents: 'app-release.apk'
          TargetFolder: '/home/mhaghshenas.ir/hr.mhaghshenas.ir/wwwroot/assets/serverstageApp'
          readyTimeout: '20000'
      - task: SSH@0
        displayName: 'Write sha512'
        inputs:
          sshEndpoint: 'mhaghshenasServer'
          runOptions: 'commands'
          commands: |
            cp /home/mhaghshenas.ir/hr.mhaghshenas.ir/wwwroot/assets/serverstageApp/app-release.apk /home/mhaghshenas.ir/hr.mhaghshenas.ir/wwwroot/assets/serverstageApp/payrollStage.apk
            sha512sum /home/mhaghshenas.ir/hr.mhaghshenas.ir/wwwroot/assets/serverstageApp/app-release.apk >> /home/mhaghshenas.ir/hr.mhaghshenas.ir/wwwroot/assets/serverstageApp/sha512.txt
          readyTimeout: '20000'

    - ${{ if eq(parameters.environment, 'prod') }}:    
      - task: CopyFilesOverSSH@0
        inputs:
          sshEndpoint: 'mhaghshenasServer'
          sourceFolder: '$(Build.SourcesDirectory)/FlutterApp/build/app/outputs/flutter-apk'
          Contents: 'app-release.apk'
          TargetFolder: '/home/mhaghshenas.ir/hr.mhaghshenas.ir/wwwroot/assets/app'
          readyTimeout: '20000'
      - task: SSH@0
        displayName: 'Write sha512'
        inputs:
          sshEndpoint: 'mhaghshenasServer'
          runOptions: 'commands'
          commands: |
            cp /home/mhaghshenas.ir/hr.mhaghshenas.ir/wwwroot/assets/app/app-release.apk /home/mhaghshenas.ir/hr.mhaghshenas.ir/wwwroot/assets/app/payroll.apk
            sha512sum /home/mhaghshenas.ir/hr.mhaghshenas.ir/wwwroot/assets/app/app-release.apk >> /home/mhaghshenas.ir/hr.mhaghshenas.ir/wwwroot/assets/app/sha512.txt
          readyTimeout: '20000'




    # - task: CopyFiles@2
    #   displayName: "Copy app to staging directory"
    #   inputs:
    #     sourceFolder: '$(Agent.BuildDirectory)'
    #     contents: '**/bundle/**'
    #     targetFolder: '$(Build.StagingDirectory)'
    #     flattenFolders: true

    # - task: PublishBuildArtifacts@1
    #   displayName: "Publish AAB file"
    #   inputs:
    #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #     ArtifactName: 'AAB'
    #     publishLocation: 'Container'

# - stage: iOSStage
#   pool: 
#     vmImage: 'macos-latest'
#   dependsOn: []
#   displayName: iOS
#   jobs:
 
#   - job: iOSJob
#     displayName: iOS
#     steps: 
          
#     # replace "iosKey" and "yourPwd" with your secure file name and password
#     - task: InstallAppleCertificate@2
#       displayName: Install certificate
#       inputs:
#         certSecureFile: 'iosKey'
#         certPwd: 'yourPwd'
#         keychain: 'temp'
    
#     # replace "ios_Profile.mobileprovision" with your secure file name
#     - task: InstallAppleProvisioningProfile@1
#       displayName: Install provisioning file
#       inputs:
#         provisioningProfileLocation: 'secureFiles'
#         provProfileSecureFile: 'ios_Profile.mobileprovision'
        
#     - task: FlutterInstall@0
#       displayName: "Install Flutter SDK"
#       inputs:
#         mode: 'auto'
#         channel: 'stable'
#         version: 'latest'

#     - task: FlutterCommand@0
#       displayName: "Run Flutter diagnostics"
#       inputs:
#         projectDirectory: '.'
#         arguments: 'doctor -v'

#     # adjust path to the *.plist file
#     - task: FlutterBuild@0
#       displayName: "Build application"
#       inputs:
#         target: ipa
#         projectDirectory: '$(Build.SourcesDirectory)'
#         exportOptionsPlist: 'ios/exportOptions.plist'

#     - task: FlutterTest@0
#       displayName: "Run unit tests"
#       inputs:
#         generateCodeCoverageReport: true
#         projectDirectory: '$(Build.SourcesDirectory)'

#     - task: CopyFiles@2
#       displayName: "Copy app to staging directory"
#       inputs:
#         sourceFolder: '$(Agent.BuildDirectory)'
#         contents: '**/ipa/*.ipa'
#         targetFolder: '$(Build.StagingDirectory)'
#         flattenFolders: true

#     - task: PublishBuildArtifacts@1
#       displayName: "Publish IPA file"
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         ArtifactName: 'IPA'
#         publishLocation: 'Container'
        
# - stage: winStage
#   pool: 
#     vmImage: 'windows-latest'
#   dependsOn: []
#   displayName: Windows
#   jobs:
 
#   - job: windowsJob
#     displayName: Windows
#     steps: 
        
#     - task: FlutterInstall@0
#       displayName: "Install Flutter SDK"
#       inputs:
#         mode: 'auto'
#         channel: 'stable'
#         version: 'latest'
    
#     - task: FlutterCommand@0
#       displayName: "Run Flutter diagnostics"
#       inputs:
#         projectDirectory: '.'
#         arguments: 'doctor -v'

#     - task: FlutterBuild@0
#       displayName: "Build application"
#       inputs:
#         target: windows
#         projectDirectory: '$(Build.SourcesDirectory)'

#     - task: FlutterTest@0
#       displayName: "Run unit tests"
#       inputs:
#         generateCodeCoverageReport: true
#         projectDirectory: '$(Build.SourcesDirectory)'

#     # install package msix -> https://pub.dev/packages/msix
#     # provide signing information in pubspec.yaml -> see https://github.com/YehudaKremer/msix/tree/main/example#without-signing
#     - task: FlutterCommand@0
#       displayName: "Create MSIX file"
#       inputs:
#         projectDirectory: '$(Build.SourcesDirectory)'
#         arguments: 'pub run msix:create --build-windows false'

#     - task: CopyFiles@2
#       displayName: "Copy app to staging directory"
#       inputs:
#         sourceFolder: '$(Agent.BuildDirectory)'
#         contents: '**/*.msix'
#         targetFolder: '$(Build.StagingDirectory)'
#         flattenFolders: true

#     - task: PublishBuildArtifacts@1
#       displayName: "Publish MSIX"
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         ArtifactName: 'Windows'
#         publishLocation: 'Container'